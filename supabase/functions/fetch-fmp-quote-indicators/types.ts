// supabase/functions/fetch-fmp-quote-indicators/types.ts

// Interface for data fetched from the FMP /quote/{symbol} endpoint
export interface FmpQuoteData {
  symbol: string;
  name?: string | null;
  price: number;
  changesPercentage?: number | null;
  changePercentage?: number | null; // FMP sometimes uses this variant
  change?: number | null; // Ensure it can be null if API sometimes omits it or sends non-numeric
  volume?: number | null;
  dayLow?: number | null;
  dayHigh?: number | null;
  yearHigh?: number | null;
  yearLow?: number | null;
  marketCap?: number | null;
  priceAvg50?: number | null;
  priceAvg200?: number | null;
  exchange?: string | null;
  open?: number | null;
  previousClose?: number | null;
  eps?: number | null;
  pe?: number | null;
  earningsAnnouncement?: string | null; // Date string or similar
  sharesOutstanding?: number | null;
  timestamp: number; // Unix timestamp (seconds) from FMP
}

// Interface for the record to be upserted into your 'live_quote_indicators' table
export interface LiveQuoteIndicatorRecord {
  symbol: string; // Primary key / conflict target
  current_price: number;
  change_percentage?: number | null;
  day_change?: number | null;
  volume?: number | null;
  day_low?: number | null;
  day_high?: number | null;
  market_cap?: number | null;
  day_open?: number | null;
  previous_close?: number | null;
  api_timestamp: number; // From FMP's 'timestamp'
  sma_50d?: number | null;
  sma_200d?: number | null;
  fetched_at: string; // ISO string, generated by the function
  year_high?: number | null;
  year_low?: number | null;
  exchange?: string | null; // From FMP's 'exchange'
  // Add other fields from FmpQuoteData if they map directly to your table
  // e.g., eps, pe if your table has columns for them
}

// Interface for rows from 'supported_symbols' table
export interface SupportedSymbol {
  symbol: string;
  // last_processed_quote_at?: string | null; // Optional: if you add this field to supported_symbols
}

// Interface for summarizing the result of processing each symbol's quote
export interface SymbolQuoteProcessingResult {
  symbol: string;
  success: boolean;
  message: string;
}

// Interface for the overall response of the Edge Function
export interface QuoteFunctionResponse {
  message: string;
  details: SymbolQuoteProcessingResult[];
  totalProcessed: number;
  totalSucceeded: number;
}
